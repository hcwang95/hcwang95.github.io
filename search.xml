<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MSC-data-wrangling</title>
    <url>/2020/04/12/MSC-data-wrangling/</url>
    <content><![CDATA[<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><ol>
<li>Take this <a href="https://regexone.com/" target="_blank" rel="noopener">short interactive regex tutorial</a>.</li>
</ol>
<p>The tutorial is great for anyone. To help us understand the material better, we can do those <a href="https://regexone.com/problem/matching_decimal_numbers" target="_blank" rel="noopener">problems</a> after the tutorial.</p>
<ol start="2">
<li>Find the number of words (in <code>/usr/share/dict/words</code>) that contain at<br>least three <code>a</code>s and don’t have a <code>&#39;s</code> ending. What are the three<br>most common last two letters of those words? <code>sed</code>‘s <code>y</code> command, or<br>the <code>tr</code> program, may help you with case insensitivity. How many<br>of those two-letter combinations are there? And for a challenge:<br>which combinations do not occur?<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /usr/share/dict/words | \</span></span><br><span class="line">        grep -E ".*([Aa].*)&#123;3,&#125;[^Ss]$" | \</span><br><span class="line">        grep -o -e '.\&#123;2\&#125;$' | \</span><br><span class="line">        sort | uniq -c | sort -nr | head -n3</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<p>Challenge (ugly but works…)</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="comment"># show what combinations are not included</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> diff &lt;(<span class="built_in">echo</span> &#123;a..z&#125;&#123;a..z&#125; | tr <span class="string">" "</span> <span class="string">"\n"</span>) \</span></span><br><span class="line">       &lt;(cat /usr/share/dict/words | \</span><br><span class="line">            grep -E ".*([Aa].*)&#123;3,&#125;[^Ss]$" | \</span><br><span class="line">            grep -o -e '.\&#123;2\&#125;$' | \</span><br><span class="line">            sort | uniq -c | awk '&#123;print $2&#125;'\</span><br><span class="line">        ) \</span><br><span class="line">    | grep "&lt;"</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>To do in-place substitution it is quite tempting to do something like<br><code>sed s/REGEX/SUBSTITUTION/ input.txt &gt; input.txt</code>. However this is a<br>bad idea, why? Is this particular to <code>sed</code>? Use <code>man sed</code> to find out<br>how to accomplish this.</li>
</ol>
<p>It is bad because if your command have any bug, the input file will be distrupted. Here is the option in the <code>man sed</code></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-i</span><span class="selector-attr">[SUFFIX]</span>, <span class="selector-tag">--in-place</span><span class="selector-attr">[=SUFFIX]</span></span><br><span class="line"></span><br><span class="line">       <span class="selector-tag">edit</span> <span class="selector-tag">files</span> <span class="selector-tag">in</span> <span class="selector-tag">place</span> (makes backup if SUFFIX supplied)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>Find your average, median, and max system boot time over the last ten<br>boots. Use <code>journalctl</code> on Linux and <code>log show</code> on macOS, and look<br>for log timestamps near the beginning and end of each boot. On Linux,<br>they may look something like:</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Logs <span class="keyword">begin</span> <span class="keyword">at</span> ...</span><br></pre></td></tr></table></figure>
<p>and</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">systemd[<span class="number">577</span>]: <span class="symbol">Startup</span> finished in ...</span><br></pre></td></tr></table></figure>
<p>On macOS, <a href="https://eclecticlight.co/2018/03/21/macos-unified-log-3-finding-your-way/" target="_blank" rel="noopener">look<br>for</a>:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">=== system boot:</span></span><br></pre></td></tr></table></figure>
<p>and</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Previous <span class="keyword">shutdown </span><span class="built_in">cause</span>: <span class="number">5</span></span><br></pre></td></tr></table></figure>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> journalctl | grep <span class="string">".*\[1\]: Startup finished in"</span> | sed -E <span class="string">'s/.*Startup finished in.* = (.*)\.$/\1/'</span> | sed s/min//g | sed s/s//g <span class="comment"># right now cannot deal with the case '1min 51.581s'</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Look for boot messages that are <em>not</em> shared between your past three<br>reboots (see <code>journalctl</code>‘s <code>-b</code> flag). Break this task down into<br>multiple steps. First, find a way to get just the logs from the past<br>three boots. There may be an applicable flag on the tool you use to<br>extract the boot logs, or you can use <code>sed &#39;0,/STRING/d&#39;</code> to remove<br>all lines previous to one that matches <code>STRING</code>. Next, remove any<br>parts of the line that <em>always</em> varies (like the timestamp). Then,<br>de-duplicate the input lines and keep a count of each one (<code>uniq</code> is<br>your friend). And finally, eliminate any line whose count is 3 (since<br>it <em>was</em> shared among all the boots).</p>
</li>
<li><p>Find an online data set like <a href="https://stats.wikimedia.org/EN/TablesWikipediaZZ.htm" target="_blank" rel="noopener">this<br>one</a>, <a href="https://ucr.fbi.gov/crime-in-the-u.s/2016/crime-in-the-u.s.-2016/topic-pages/tables/table-1" target="_blank" rel="noopener">this<br>one</a>.<br>or maybe one <a href="https://www.springboard.com/blog/free-public-data-sets-data-science-project/" target="_blank" rel="noopener">from<br>here</a>.<br>Fetch it using <code>curl</code> and extract out just two columns of numerical<br>data. If you’re fetching HTML data,<br><a href="https://github.com/EricChiang/pup" target="_blank" rel="noopener"><code>pup</code></a> might be helpful. For JSON<br>data, try <a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener"><code>jq</code></a>. Find the min and<br>max of one column in a single command, and the sum of the difference<br>between the two columns in another.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>[Missing Semester in CS] Editors (Vim)</title>
    <url>/2020/04/10/MSC-editors-vim/</url>
    <content><![CDATA[<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><ol>
<li><p>Complete <code>vimtutor</code>. Note: it looks best in a<br><a href="https://en.wikipedia.org/wiki/VT100" target="_blank" rel="noopener">80x24</a> (80 columns by 24 lines)<br>terminal window.</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vimtutor</span></span><br></pre></td></tr></table></figure>
<p>Really fantasitc learning material. Also remember the notes inside the tutor file: <strong>You should be learning by doing, not memorization</strong>.</p>
</li>
<li><p>Download our <a href="https://missing.csail.mit.edu/2020/files/vimrc" target="_blank" rel="noopener">basic vimrc</a> and save it to <code>~/.vimrc</code>. Read<br>through the well-commented file (using Vim!), and observe how Vim looks and<br>behaves slightly differently with the new config.</p>
</li>
</ol>
 <a id="more"></a>

<p>Just want to mention some great educational commands:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Left&gt;</span>  :<span class="keyword">echoe</span> <span class="string">"Use h"</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Right&gt;</span> :<span class="keyword">echoe</span> <span class="string">"Use l"</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Up&gt;</span>    :<span class="keyword">echoe</span> <span class="string">"Use k"</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Down&gt;</span>  :<span class="keyword">echoe</span> <span class="string">"Use j"</span><span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>
<p>Every time we want to use direction key, they will disable and tell us not to do that.</p>
<ol start="3">
<li>Install and configure a plugin:<br><a href="https://github.com/ctrlpvim/ctrlp.vim" target="_blank" rel="noopener">ctrlp.vim</a>.<ol>
<li>Create the plugins directory with <code>mkdir -p ~/.vim/pack/vendor/start</code></li>
<li>Download the plugin: <code>cd ~/.vim/pack/vendor/start; git clone
https://github.com/ctrlpvim/ctrlp.vim</code></li>
<li>Read the<br><a href="https://github.com/ctrlpvim/ctrlp.vim/blob/master/readme.md" target="_blank" rel="noopener">documentation</a><br>for the plugin. Try using CtrlP to locate a file by navigating to a<br>project directory, opening Vim, and using the Vim command-line to start<br><code>:CtrlP</code>.<ol>
<li>Customize CtrlP by adding<br><a href="https://github.com/ctrlpvim/ctrlp.vim/blob/master/readme.md#basic-options" target="_blank" rel="noopener">configuration</a><br>to your <code>~/.vimrc</code> to open CtrlP by pressing Ctrl-P.</li>
</ol>
</li>
</ol>
</li>
</ol>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/.vim</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/ctrlpvim/ctrlp.vim.git bundle/ctrlp.vim</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim ~/.vimrc <span class="comment"># setting the config in vimrc</span></span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>To practice using Vim, re-do the <a href="https://missing.csail.mit.edu/2020/editors/#demo" target="_blank" rel="noopener">Demo</a> from lecture on your own<br>machine.</li>
<li>Use Vim for <em>all</em> your text editing for the next month. Whenever something<br>seems inefficient, <strong>or when you think “there must be a better way”, try<br>Googling it, there probably is.</strong></li>
<li>Configure your other tools to use Vim bindings (see instructions above).</li>
</ol>
<p>Here is a <a href="https://www.ubuntupit.com/best-vim-plugins-for-programming/" target="_blank" rel="noopener">list</a> of commonly used plugins for vim user.</p>
<ol start="7">
<li>Further customize your <code>~/.vimrc</code> and install more plugins.</li>
<li>(Advanced) Convert XML to JSON (<a href="https://missing.csail.mit.edu/2020/files/example-data.xml" target="_blank" rel="noopener">example file</a>)<br>using Vim macros. Try to do this on your own, but you can look at the<br><a href="https://missing.csail.mit.edu/2020/editors/#macros" target="_blank" rel="noopener">macros</a> section above if you get stuck.</li>
</ol>
<p>Follow the instruction is enough to reproduce. And you will find it exciting when the editor programmably works for you. Completely reduce the repetition!</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>fluent-python</title>
    <url>/2020/04/05/fluent-python/</url>
    <content><![CDATA[<a id="more"></a>



<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><ol>
<li><p>Check the major difference between Python2 and Python3 at <a href="https://docs.python.org/3.0/whatsnew/3.0.html" target="_blank" rel="noopener">What’s New in Python 3.0</a></p>
<ul>
<li><strong>Views And Iterators</strong> Instead Of Lists</li>
<li><a href="https://www.python.org/dev/peps/pep-0238/" target="_blank" rel="noopener">PEP 238</a> Changing the behavior of division</li>
<li>All text is Unicode</li>
</ul>
</li>
<li><p>REPL(read-eval-print-loop), <a href="https://docs.python.org/3/library/doctest.html" target="_blank" rel="noopener">Doctesting</a>.  Writing tests first as TDD suggests.</p>
</li>
<li><p>“dunder methods”: double under function, i.e. <code>__getitem__</code>.</p>
</li>
<li><p>Use of <code>collections.namedtuple</code> to construct a simple class to represent individual cards.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Card = collections.namedtuple(<span class="string">'Card'</span>, [<span class="string">'rank'</span>, <span class="string">'suit'</span>])</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="Python-Data-Models"><a href="#Python-Data-Models" class="headerlink" title="Python Data Models"></a>Python Data Models</h2><ol>
<li><code>len(some_object)</code> rather than <code>some_object.len()</code>.</li>
<li>Implement <code>__getitem__</code> to make an object iterable, then usable for some standard libraries! </li>
<li>CPython interpreter will call <code>__len__</code> function for user-defined class, but will take a shortcut by getting <code>ob_size</code> in the <code>PyVarObjectC</code> for built-in objects like <code>list</code>, <code>str</code>, etc.</li>
<li>Avoid creating arbitrary, custom attributes with the <code>__foo__</code> syntax because such names<br>may acquire special meanings in the future, even if they are unused today.</li>
<li>If we did not implement <code>__repr__</code>, vector instances would<br>be shown in the console like <code>&lt;Vector object at 0x10e100070&gt;</code>. The string returned by <code>__repr__</code> should be unambiguous and, if possible, match the<br>source code necessary to recreate the object being represented. </li>
<li><code>__str__</code> should return a string suitable for display<br>to end-users. Check <a href="https://stackoverflow.com/questions/1436703/difference-between-str-and-repr" target="_blank" rel="noopener">difference between <code>__str__</code> and <code>__repr__</code></a>.</li>
<li>By default, instances of user-defined classes are considered truthy, unless either<br><code>__bool__</code> or <code>__len__</code> is implemented.</li>
</ol>
<h2 id="Data-structures"><a href="#Data-structures" class="headerlink" title="Data structures"></a>Data structures</h2><h3 id="Array-of-sequences"><a href="#Array-of-sequences" class="headerlink" title="Array of sequences"></a>Array of sequences</h3><ol>
<li><p>Strings, lists, byte sequences, arrays, XML elements and database results share a rich set of common operations including iteration, slicing, sorting and concatenation.</p>
</li>
<li><p><strong>Container</strong> sequences(<code>list</code>, <code>tuple</code> and <code>collections.deque</code>) hold references to the objects they contain, which may be of any type, while <strong>flat</strong> sequences (<code>str</code>,<code>bytes</code>,<code>bytearray</code>, <code>memoryview</code> and <code>array.array</code>) physically store the value of each item within its own memory space, and not as distinct objects.</p>
</li>
<li><p><strong>Mutable sequences</strong>:<br><code>list</code>,<code>bytearray</code>, <code>array.array</code>, <code>collections.deque</code> and <code>memory</code>; <strong>Immutable sequences</strong>:<br><code>tuple</code>, <code>str</code> and<code>bytes</code></p>
</li>
<li><p>List comprehension = <em>listcomp</em>, generator expression = <em>genexprs</em>.</p>
</li>
<li><p><strong>Only</strong> do <em>listcomp</em> when you create a list, others should use for loop for more readable and less undetected side-effects.</p>
</li>
<li><p>In Python code, line breaks are ignored inside pairs of <code>[]</code>, <code>{}</code> or <code>()</code>.<br>So you can build multi-line lists, listcomps, genexps, dictionaries etc.<br>without using the ugly <code>\</code> line continuation escape.</p>
</li>
<li><p>Use tuple as records, where the position is vital for the meaning of records.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">traveler_ids = [(<span class="string">'USA'</span>, <span class="string">'31195855'</span>), (<span class="string">'BRA'</span>, <span class="string">'CE342567'</span>),</span><br><span class="line"><span class="meta">... </span>(<span class="string">'ESP'</span>, <span class="string">'XDA205856'</span>)]</span><br></pre></td></tr></table></figure></li>
<li><p>Unpacking. Tuple unpacking is widely used in Python. But Python also provides <a href="https://www.python.org/dev/peps/pep-3132/" target="_blank" rel="noopener">Extended Iterable Unpacking</a>, where we use <code>*</code> to grab excess items.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, *rest = range(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, rest</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, *rest = range(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, rest</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, [<span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, *rest = range(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, rest</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, [])</span><br></pre></td></tr></table></figure></li>
<li><p>Nested tuple unpacking: The tuple to receive an expression to unpack can have nested tuples, like <code>(a, b, (c, d))</code> and Python will do the right thing if the expression matches the nesting structure. </p>
</li>
<li><p>Named tuples: The <code>collections.namedtuple</code> function is a factory that produces subclasses of tuple<br>enhanced with field names and a class name — which helps debugging</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>City = namedtuple(<span class="string">'City'</span>, <span class="string">'name country population coordinates'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tokyo = City(<span class="string">'Tokyo'</span>, <span class="string">'JP'</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tokyo</span><br><span class="line">City(name=<span class="string">'Tokyo'</span>, country=<span class="string">'JP'</span>, population=<span class="number">36.933</span>, coordinates=(<span class="number">35.689722</span>, <span class="number">139.691667</span>))</span><br></pre></td></tr></table></figure>
<p>Other attributes of namedtuple, <code>fields</code>, <code>make</code>, <code>asdict</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>City._fields</span><br><span class="line">(<span class="string">'name'</span>, <span class="string">'country'</span>, <span class="string">'population'</span>, <span class="string">'coordinates'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>LatLong = namedtuple(<span class="string">'LatLong'</span>, <span class="string">'lat long'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>delhi_data = (<span class="string">'Delhi NCR'</span>, <span class="string">'IN'</span>, <span class="number">21.935</span>, LatLong(<span class="number">28.613889</span>, <span class="number">77.208889</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>delhi = City._make(delhi_data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>delhi._asdict()</span><br><span class="line">OrderedDict([(<span class="string">'name'</span>, <span class="string">'Delhi NCR'</span>), (<span class="string">'country'</span>, <span class="string">'IN'</span>), (<span class="string">'population'</span>,</span><br><span class="line"><span class="number">21.935</span>), (<span class="string">'coordinates'</span>, LatLong(lat=<span class="number">28.613889</span>, long=<span class="number">77.208889</span>))])</span><br></pre></td></tr></table></figure></li>
<li><p>Slice Object: <code>slice(start, end, step)</code> can be used to get sliced sequences from list, most importantly, we can define the slicing based by a name. </p>
</li>
<li><p>Assigning to slice will replace the corresponding sequences defined by the slice. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = list(range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> l[<span class="number">5</span>:<span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">3</span>::<span class="number">2</span>] = [<span class="number">11</span>, <span class="number">22</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>Beware of expressions like <code>a * n</code> when <code>a</code> is a sequence containing mutable items.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = l * <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[[<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">10</span>], [<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">10</span>], [<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">10</span>], [<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">10</span>], [<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">10</span>]]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Something wierd from list inside tuple, see the example below,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">2</span>] += [<span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>])</span><br></pre></td></tr></table></figure>
<p>Takeaway from the example:</p>
</li>
</ol>
<ul>
<li>Putting mutable items in tuples is not a good idea.</li>
<li>Augmented assignment is not an atomic operation — we just saw it throwing an exception after doing part of its job.</li>
</ul>
<ol start="15">
<li><p><strong>Python API convention</strong>: functions or methods that change an object in-place should return <code>None</code> to make it clear to the caller that the object itself was changed, and no new object was created.</p>
</li>
<li><p>Because of returning None, Python is not naturally support fluenct interface. A <a href="https://en.wikipedia.org/wiki/Fluent_interface" target="_blank" rel="noopener"><strong>fluent interface</strong></a> is normally implemented by using method chaining to implement method cascading (in languages that do not natively support cascading), concretely by having each method return <code>this (self)</code>.</p>
</li>
<li><p><code>bisect.insort</code>: inserts <code>item</code> into <code>seq</code> so as to keep <code>seq</code> in ascending order.</p>
</li>
<li><p><code>array.array</code> is better than <code>list</code> when all items in the sequence are numbers. The <code>array</code> is actually C array, and supports all mutable sequence operations (<code>pop</code>, <code>insert</code>, <code>extend</code>), also supports additional write and read function (<code>fromfile</code>, <code>tofile</code>). Notably, the <code>fromfile</code> function reading 10 million floating number is 60 times faster than reading numbers from <code>txt</code> file since it write and read to binary file(also 50-60% smaller than <code>txt</code> file).</p>
</li>
<li><p>Memory views: the built-in <code>memorview</code> is a shared-memory sequence type that lets you handle<br>slices of arrays without copying bytes. It is inspired by <code>NumPy</code> library. It is useful when dealing with large dataset.</p>
</li>
<li><p><code>deque</code>: double ended queue, optimized for modifying element from both ends. <code>queue</code> provides the synchronized (i.e. thread-safe) classes <code>Queue</code>, <code>LifoQueue</code> and <code>PriorityQueue</code>. These are used for safe communication between threads.</p>
</li>
<li><p><code>multiprocessing</code> package has its own queue but designed for inter-process communication, <code>asyncio</code> also implements similar queues which are adapted for managing task in asynchronous programming.</p>
</li>
</ol>
<h3 id="Dictionaries-and-Sets"><a href="#Dictionaries-and-Sets" class="headerlink" title="Dictionaries and Sets"></a>Dictionaries and Sets</h3><ol>
<li>Dictionaries are everywhere in Python. The built-in functions live in <code>__builtins__.__dict__</code>.</li>
<li>The key must be <strong>hashable</strong> in dictionary, which implements <code>__hash__</code> method. The atomic immutable types (<code>str</code>, <code>bytes</code>, numeric types) are all hashable. A <code>frozen set</code>(builtin set type which cannot be changed after created) is always hashable, because its elements must be hashable by definition. A tuple is hashable only if all its items are hashable.</li>
<li><strong>dict comprehension</strong> - <em>dictcomp</em>: builds a dict instance by producing <code>key:value</code> pair from any iterable</li>
<li>Every Pythonista knows that d.get(k, default) is an alternative to <code>d[k]</code> whenever a default value is more convenient than handling <code>KeyError</code>. However I didn’t konw that before read the paragraph…</li>
<li><code>setdefault</code>:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dict.setdefault(key, []).append(new_value)</span><br><span class="line"><span class="comment"># is equvalent to </span></span><br><span class="line"><span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> my_dict:</span><br><span class="line">    my_dict[key] = []</span><br><span class="line">my_dict[key].append(new_value)</span><br></pre></td></tr></table></figure></li>
<li>Using <code>defaultdict</code> or another mapping implemented with <code>__missing__</code>, to properly handle the missing key in lookup.</li>
<li>A search like <code>k in my_dict.keys()</code> is efficient in Python 3 even for very large mappings because dict.keys() returns a view, which is similar to a set, and containment checks in sets are as fast as in dicts. Check <a href="https://stackoverflow.com/questions/8957750/what-are-dictionary-view-objects/8960727#8960727" target="_blank" rel="noopener">this</a> for explanations about <strong>dictionary view</strong>.</li>
<li>Other types of mapping (dict): <code>collections.OrderedDict</code>: maintains keys in insertion order, allowing iteration over items in a predictable order; <code>collections.OrderedDict</code>: holds a list of mappings which can be searched as one. The lookup is performed on<br>each mapping in order, and succeeds if the key is found in any of them. <code>collections.Counter</code>: a mapping that holds an integer count for each key; <code>collections.UserDict</code>:  a pure Python implementation of a mapping that works like a standard dict, ususally desiged to be <strong>subclassed</strong>.</li>
<li>We should subclass <code>UserDict</code> rather than bulit-in <code>dict</code>, because there are shortcuts implementations that may cause problem. Here is the comparison for designing a new dictionary class with <code>UserDict</code> and <code>dict</code>: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrKeyDict0</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(key, str):</span><br><span class="line">            <span class="keyword">raise</span> KeyError(key)</span><br><span class="line">        <span class="keyword">return</span> self[str(key)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> self.keys() <span class="keyword">or</span> str(key) <span class="keyword">in</span> self.keys()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrKeyDict</span><span class="params">(collections.UserDict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(key, str):</span><br><span class="line">            <span class="keyword">raise</span> KeyError(key)</span><br><span class="line">        <span class="keyword">return</span> self[str(key)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(key) <span class="keyword">in</span> self.data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, item)</span>:</span></span><br><span class="line">        self.data[str(key)] = item</span><br></pre></td></tr></table></figure></li>
<li>Use <code>type.MappingProxyType</code> could generate a <strong>read-only</strong> but dynamic view of a dictionary, which prevents uncautious update of a dictionary. </li>
<li><code>Set</code> class implements some infix operations <strong>union, intersection and difference etc.</strong>, which could be used to reduce the loop thus the running time: here is an exaple to check the occurence of <em>needles</em> in *haystack: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">found = len(needles &amp; haystack)</span><br></pre></td></tr></table></figure></li>
<li><code>set comprehension</code> similar to list / dict comprehension.</li>
<li>The hashtable used by <code>dict</code> and <code>set</code> are powerful and should achieve constant key searching / retrieving time, also in practice it might be always constant, for example the memeory cannot fit the whole data, then <strong>memory fetching time</strong> may increase w.r.t. the size of data.</li>
<li>Implementation of hashtable used by Python: a sparse array of cells/buckets, each cell contains the reference to key and value. Python tries to keep at least <strong>1/3</strong> cells are empty.</li>
<li>due to the hash table implementation, <strong>adding items to a dict/set may change the order of existing keys</strong>. So DO NOT modifying contents while iterating through it in the context of <code>dict</code> and <code>set</code>.</li>
</ol>
<h3 id="Text-and-bytes"><a href="#Text-and-bytes" class="headerlink" title="Text and bytes"></a>Text and bytes</h3><ol>
<li><p><code>str</code> is sequence of characters, while <em>characters</em> may have different definition and may lead to problem if not properly handled.</p>
</li>
<li><p>The actual bytes that represent a character depend on the encoding in use. From <strong>code point</strong> of the character to byte representation is encoder, the reverse is decoding. The byte representation is used for storage and transmission, while <code>str</code> is for human readability.</p>
</li>
<li><p><code>UnicodeEncodeError</code> usually associates with source string having characters cannot be mapped to byte sequence with specified encoder.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>city = <span class="string">'São Paulo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>city.encode(<span class="string">'utf_8'</span>)</span><br><span class="line"><span class="string">b'S\xc3\xa3o Paulo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>city.encode(<span class="string">'utf_16'</span>)</span><br><span class="line"><span class="string">b'\xff\xfeS\x00\xe3\x00o\x00 \x00P\x00a\x00u\x00l\x00o\x00'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>city.encode(<span class="string">'iso8859_1'</span>)</span><br><span class="line"><span class="string">b'S\xe3o Paulo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>city.encode(<span class="string">'cp437'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">File <span class="string">"/.../lib/python3.4/encodings/cp437.py"</span>, line <span class="number">12</span>, <span class="keyword">in</span> encode</span><br><span class="line"><span class="keyword">return</span> codecs.charmap_encode(input,errors,encoding_map)</span><br><span class="line">UnicodeEncodeError: <span class="string">'charmap'</span> codec can<span class="string">'t encode character '</span>\xe3<span class="string">' in</span></span><br><span class="line"><span class="string">position 1: character maps to &lt;undefined&gt;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; city.encode('</span>cp437<span class="string">', errors='</span>ignore<span class="string">')</span></span><br><span class="line"><span class="string">b'</span>So Paulo<span class="string">'</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; city.encode('</span>cp437<span class="string">', errors='</span>replace<span class="string">')</span></span><br><span class="line">b'S?o Paulo'</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>city.encode(<span class="string">'cp437'</span>, errors=<span class="string">'xmlcharrefreplace'</span>)</span><br><span class="line"><span class="string">b'S&amp;#227;o Paulo'</span></span><br></pre></td></tr></table></figure>
<p><code>UnicodeDecodeError</code> occurs when byte sequneces cannot be recoginized by specified decoder.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>octets = <span class="string">b'Montr\xe9al'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>octets.decode(<span class="string">'cp1252'</span>)</span><br><span class="line"><span class="string">'Montréal'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>octets.decode(<span class="string">'iso8859_7'</span>)</span><br><span class="line"><span class="string">'Montrιal'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>octets.decode(<span class="string">'koi8_r'</span>)</span><br><span class="line"><span class="string">'MontrИal</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; octets.decode('</span>utf_8<span class="string">')</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">UnicodeDecodeError: '</span>utf<span class="number">-8</span><span class="string">' codec can'</span>t decode byte <span class="number">0xe9</span> <span class="keyword">in</span> position <span class="number">5</span>:</span><br><span class="line">invalid continuation byte</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>octets.decode(<span class="string">'utf_8'</span>, errors=<span class="string">'replace'</span>)</span><br><span class="line"><span class="string">'Montr�al</span></span><br></pre></td></tr></table></figure>
<p><code>SyntaxError</code> occurs when the source Python file contains non UTF8 (default codecs for Python) chars.</p>
</li>
<li><p>When you are not sure about the string codecs, use <a href="https://pypi.org/project/chardet/" target="_blank" rel="noopener"><code>chardet</code></a> to detect.</p>
</li>
<li><p><strong>Unicode sandwich</strong> as the best practice of text processing. (1) read and encode text from bytes to <code>str</code>; (2) processing in <code>str</code>， (3) decode to byte sequence and store back.</p>
</li>
<li><p>Garbled chars occurs when you read file with wrong decoder, ususally windows having its default “Windows 1252” will not compatible with some chars in UTF8.</p>
</li>
<li><p>Be careful between the codecs default in Unix and Windows system. check <code>locale.getpreferredencoding()</code> for the default encoding. </p>
</li>
<li><p><code>os</code> and <code>re</code> packages could take <code>str</code> and <code>bytes</code> as arguments, with corresponding different handling stategies. Be careful about the type before passing it to those functions in <code>os</code> and <code>re</code>. </p>
</li>
</ol>
<h2 id="Functions-as-objects"><a href="#Functions-as-objects" class="headerlink" title="Functions as objects"></a>Functions as objects</h2><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><ol>
<li>Functions in Python are first-class objects (i.e. integers, strings and dictionaries). Programming language theorists define a <code>first-class object</code> as a program entity that can be:</li>
</ol>
<ul>
<li>created at runtime;</li>
<li>assigned to a variable or element in a data structure;</li>
<li>passed as an argument to a function;</li>
<li>returned as the result of a function.</li>
</ul>
<ol start="2">
<li><p><strong>Higher order functions</strong>: takes a function as argument or returns a function as a results. For example the function <code>sorted</code> is an example.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sorted takes a function len as argument</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits = [<span class="string">'strawberry'</span>, <span class="string">'fig'</span>, <span class="string">'apple'</span>, <span class="string">'cherry'</span>, <span class="string">'raspberry'</span>, <span class="string">'banana'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(fruits, key=len)</span><br><span class="line">[<span class="string">'fig'</span>, <span class="string">'apple'</span>, <span class="string">'cherry'</span>, <span class="string">'banana'</span>, <span class="string">'raspberry'</span>, <span class="string">'strawberry'</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>In the functional programming paradigm, some of the best known higher-order functions are <code>map</code>, <code>filter</code>, <code>reduce</code> and <code>apply</code>. <code>apply</code> is deprecated and not used after Python3. And for other functions there are many better alternatives for most of their use cases.</p>
</li>
<li><p><code>map</code> and <code>filter</code> can be replaced by <code>listcomp</code> and <code>genexpr</code> since they are more readable, sometimes more faster according to the <a href="https://stackoverflow.com/a/1247490" target="_blank" rel="noopener">link</a> (also there are many good explanations of the difference between <code>map</code> v.s. <code>listcomp</code>).</p>
</li>
<li><p>The best use of anonymous functions is in the context of an argument list. Otherwise it is better to used the normal function definition. Check <a href="https://docs.python.org/3/howto/functional.html#small-functions-and-the-lambda-expression" target="_blank" rel="noopener">here</a> for the refactor tips for bad lambda functions in Python.</p>
</li>
<li><p>Python3 proivdes pretty flexible arguments passing to a function, check <a href="https://stackoverflow.com/a/36908" target="_blank" rel="noopener">here</a> for more information. Official explanation is introduced by <a href="https://www.python.org/dev/peps/pep-3102/" target="_blank" rel="noopener">PEP 3102</a>. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># understand more about how to right functions with variable positional arguments and keyword argument</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, *pargs, **kargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(a, pargs, kargs)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, x=<span class="number">4</span>, y=<span class="number">5</span>)</span><br><span class="line"><span class="number">1</span> (<span class="number">2</span>, <span class="number">3</span>) &#123;<span class="string">'x'</span>: <span class="number">4</span>, <span class="string">'y'</span>: <span class="number">5</span>&#125; <span class="comment"># the arguments are parsed to assign to different argument in the signature of the function</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f_1</span><span class="params">(a, *pargs, **kargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(a, pargs, kargs)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, x=<span class="number">4</span>, x=<span class="number">5</span>)</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: keyword argument repeated <span class="comment"># cannot parse duplicated keyword arguments</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, x=<span class="number">4</span>, y=<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: positional argument follows keyword argument</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a,  **kargs, *pargs)</span>:</span></span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a,  **kargs, *pargs)</span>:</span></span><br><span class="line">                       ^</span><br><span class="line">SyntaxError: invalid syntax <span class="comment"># cannot create positional arguments after keyword arguments.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Function annotations</strong>: Python 3 provides syntax to attach metadata to the parameters of a function declaration<br>and its return value. Here is an example, the only difference is its sigature in the declaration.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span><span class="params">(text, max_len:=<span class="number">80</span>)</span>:</span> <span class="comment"># without annotations</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span><span class="params">(text:str, max_len:<span class="string">'int &gt; 0'</span>=<span class="number">80</span>)</span> -&gt; str:</span> <span class="comment"># with annotations</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__annotations__</span><br><span class="line">&#123;'text': &lt;class 'str'&gt;, 'max_len': 'int &gt; 0', 'return': &lt;class 'str'&gt;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>Note</strong>: The only thing Python does with annotations is to store them in the <code>__annotations__</code> attribute of the function. Nothing else: <strong>no checks, enforcement, validation, or any other action is performed</strong>. They are just metadata that <strong>may</strong> be used by tools, such as IDEs, frameworks and decorators. </p>
<ol start="8">
<li><code>operator</code> module implements many common functions that needed in functional programming, for example <code>mul</code> == <code>lambda a, b: a*b</code>, also <code>itemgetter</code> which helps you to get subitem from the item which can retrieve item by index (implements <code>__getitem__</code>), <code>attrgetter</code> can get values by keyword(s) from an item having mapping. Some functions supported by <code>operator</code> can be found in the following:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[name <span class="keyword">for</span> name <span class="keyword">in</span> dir(operator) <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'_'</span>)]</span><br><span class="line">[<span class="string">'abs'</span>, <span class="string">'add'</span>, <span class="string">'and_'</span>, <span class="string">'attrgetter'</span>, <span class="string">'concat'</span>, <span class="string">'contains'</span>,</span><br><span class="line"><span class="string">'countOf'</span>, <span class="string">'delitem'</span>, <span class="string">'eq'</span>, <span class="string">'floordiv'</span>, <span class="string">'ge'</span>, <span class="string">'getitem'</span>, <span class="string">'gt'</span>,</span><br><span class="line"><span class="string">'iadd'</span>, <span class="string">'iand'</span>, <span class="string">'iconcat'</span>, <span class="string">'ifloordiv'</span>, <span class="string">'ilshift'</span>, <span class="string">'imod'</span>, <span class="string">'imul'</span>, <span class="string">'index'</span>, <span class="string">'indexOf'</span>, <span class="string">'inv'</span>, <span class="string">'invert'</span>, <span class="string">'ior'</span>, <span class="string">'ipow'</span>, <span class="string">'irshift'</span>, <span class="string">'is_'</span>, <span class="string">'is_not'</span>, <span class="string">'isub'</span>, <span class="string">'itemgetter'</span>, <span class="string">'itruediv'</span>, <span class="string">'ixor'</span>, <span class="string">'le'</span>, <span class="string">'length_hint'</span>, <span class="string">'lshift'</span>, <span class="string">'lt'</span>, <span class="string">'methodcaller'</span>, <span class="string">'mod'</span>, <span class="string">'mul'</span>, <span class="string">'ne'</span>, <span class="string">'neg'</span>, <span class="string">'not_'</span>, <span class="string">'or_'</span>, <span class="string">'pos'</span>, <span class="string">'pow'</span>, <span class="string">'rshift'</span>, <span class="string">'setitem'</span>, <span class="string">'sub'</span>, <span class="string">'truediv'</span>, <span class="string">'truth'</span>, <span class="string">'xor'</span>]</span><br></pre></td></tr></table></figure>
Most of the 52 names above are self-evident. The group of names prefixed with <code>i</code> and<br>the name of another operator — e.g. <code>iadd</code>, <code>iand</code> etc. — correspond to the augmented<br>assignment operators — e.g. <code>+=,</code> <code>&amp;=</code> etc. </li>
</ol>
<p>Also check <code>methodcaller</code> in <code>operator</code> that could create those functions based on other built-in functions.</p>
<ol start="9">
<li><code>functools.partial</code> can create <strong>partial functions</strong> where part of the arguments are freezed compared to the normal functions. Here is an example<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>triple = partial(mul, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>triple(<span class="number">7</span>)</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(triple, range(<span class="number">1</span>, <span class="number">10</span>)))</span><br><span class="line">[<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">27</span>]</span><br></pre></td></tr></table></figure>
<code>partial</code> takes a callable as first argument, followed by an arbitrary number of positional<br>and keyword arguments to bind. On a sidenote, <code>partialmethod</code> (introduced from Python 3.4) is same to <code>partial</code> but for class method, refer to <a href="https://stackoverflow.com/a/42844721" target="_blank" rel="noopener">this</a>.</li>
</ol>
<h3 id="Decorators-and-closures"><a href="#Decorators-and-closures" class="headerlink" title="Decorators and closures"></a>Decorators and closures</h3><ol>
<li><p>The first crucial fact about <code>decorators</code> is that they have the power to replace the decorated function with a different one. The second crucial fact is that <strong>they are executed immediately when a module is loaded</strong>.<br>Check the following decorators and prints to understand it better. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># registration.py</span></span><br><span class="line">registry = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">'running register(%s)'</span> % func)</span><br><span class="line">    registry.append(func)</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f1()'</span>)</span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f2()'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f3()'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running main()'</span>)</span><br><span class="line">    print(<span class="string">'registry -&gt;'</span>, registry)</span><br><span class="line">    f1()</span><br><span class="line">    f2()</span><br><span class="line">    f3()</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment">## running this as a python file</span></span><br><span class="line">$ python3 registration.py</span><br><span class="line">running register(&lt;function f1 at <span class="number">0x100631bf8</span>&gt;)</span><br><span class="line">running register(&lt;function f2 at <span class="number">0x100631c80</span>&gt;)</span><br><span class="line">running main()</span><br><span class="line">registry -&gt; [&lt;function f1 at 0x100631bf8&gt;, &lt;function f2 at 0x100631c80&gt;]</span><br><span class="line">running f1()</span><br><span class="line">running f2()</span><br><span class="line">running f3()</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Closure</strong>: similar to the meaning applied to other programming languages, the closure is reachability of an local variable. Consider the following decorator example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line">    series = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        series.append(new_value)</span><br><span class="line">        total = sum(series)</span><br><span class="line">        <span class="keyword">return</span> total/len(series)</span><br><span class="line">    <span class="keyword">return</span> averager</span><br><span class="line"><span class="comment"># load the module and run     </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">11</span>)</span><br><span class="line"><span class="number">10.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">12</span>)</span><br><span class="line"><span class="number">11.0</span></span><br></pre></td></tr></table></figure>
<p>Where <code>series</code> is a <strong>free variable</strong> (variable that is not bound in the local scope). Although we could not find in the local scope, the <code>series</code> is bound and kept in the <code>__closure___</code> attribute of the returned function <code>avg</code>.<br>Here is how we could find the free variable (continued from last code block). </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__code__.co_varnames</span><br><span class="line">(<span class="string">'new_value'</span>, <span class="string">'total'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class="line">(<span class="string">'series'</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__closure__</span><br><span class="line">(&lt;cell at <span class="number">0x107a44f78</span>: list object at <span class="number">0x107a91a48</span>&gt;,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__closure__[<span class="number">0</span>].cell_contents</span><br><span class="line">[<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br></pre></td></tr></table></figure>
<p>To make it easier, we only need to deal with those “external variables” <strong>when we define a function nested in another function</strong>. </p>
</li>
<li><p><code>nonlocal</code> is used to keep immutable free variables not changed to local even if there is an assignment in the local scope. Here is a function which give the same output with the previous <code>averager</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> count, total <span class="comment"># without this line assignment error will occur because count will be update to be a local variable</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        total += new_value</span><br><span class="line">        <span class="keyword">return</span> total / count</span><br><span class="line">    <span class="keyword">return</span> averager</span><br></pre></td></tr></table></figure>
</li>
<li><p>A draw back for a simple decorator is that it will mask the <code>__name__</code> and <code>__doc__</code> of the decorated functions. We could use <code>functools.wraps</code> to copy those information to the decorated return function. </p>
</li>
<li><p>Check <code>singledispatch</code> decorator at <a href="https://www.python.org/dev/peps/pep-0443/" target="_blank" rel="noopener">here</a>.</p>
</li>
</ol>
<ol start="6">
<li><p><strong>stacked decorators</strong> applied from inner to outer:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@d1</span></span><br><span class="line"><span class="meta">@d2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># is the same as </span></span><br><span class="line">f = d1(d2(f))</span><br></pre></td></tr></table></figure></li>
<li><p>Use <strong>decorator factory method</strong> could let the decorator accept other arguments, note that the factory method return the decorator rather than the inner function defined inside the decorator. Samples: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">registry = set()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(active=True)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line">        print(<span class="string">'running register(active=%s)-&gt;decorate(%s)'</span></span><br><span class="line">            % (active, func))</span><br><span class="line">        <span class="keyword">if</span> active:</span><br><span class="line">            registry.add(func)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            registry.discard(func)</span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"><span class="meta">@register(active=False)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f1()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register() </span></span><br><span class="line"><span class="comment"># here we need to add bracket to call register to get real decorator!!</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f2()'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Check <a href="https://wiki.python.org/moin/PythonDecoratorLibrary" target="_blank" rel="noopener">Python Decorator Library</a> for more practical examples of decorators.</p>
</li>
</ol>
<h2 id="Object-Oriented-Idioms"><a href="#Object-Oriented-Idioms" class="headerlink" title="Object Oriented Idioms"></a>Object Oriented Idioms</h2><h3 id="Object-references-mutability-recylcing"><a href="#Object-references-mutability-recylcing" class="headerlink" title="Object references, mutability, recylcing"></a>Object references, mutability, recylcing</h3><ol>
<li><p>Python variables are reference to the real object.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>use <code>is</code> to check object identities are same or not, use <code>==</code> to check the values are equal or not between two objects. <code>is</code> is faster than <code>==</code> because the former cannot be overloaded so Python does not have to find and invoke special methods to evaluate it. Note that <code>==</code> is the syntactic sugar for <code>__eq__</code> function.</p>
</li>
<li><p>Copies are shallow by default: the shallows refers during copy the outermost container get copied but inside elements are not copied. Here is an example</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1 = [<span class="number">3</span>, [<span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 = list(l1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line">[<span class="number">3</span>, [<span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 == l1</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 <span class="keyword">is</span> l1</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2[<span class="number">1</span>].append(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1</span><br><span class="line">[<span class="number">3</span>, [<span class="number">55</span>, <span class="number">44</span>, <span class="number">100</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line">[<span class="number">3</span>, [<span class="number">55</span>, <span class="number">44</span>, <span class="number">100</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>use <code>deepcopy</code> to copy objects which don’t have shared reference to the source objects. Also we could customized copy and deepcopy behavior by implementing <code>__copy__()</code> and <code>__deepcopy__()</code> method according to the <a href="https://docs.python.org/3/library/copy.html" target="_blank" rel="noopener">doc</a>. </p>
</li>
<li><p>The parameter passing in Python is <em>call by sharing</em>: each formal parameter of the function gets a copy of each reference in the arguments. The result of this scheme is that a function may change any <strong>mutable object</strong> passed as a parameter, but it cannot change the <strong>identity</strong> of those objects, i.e. it cannot replace altogether an object with another. Here is an example</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b)</span>:</span></span><br><span class="line"><span class="meta">... </span>    a += b</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(x, y)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment"># x and y does not change because they are int type which is immutable, so changes in function cannot replace x with a new int object.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(a, b)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment"># the object a does not get changed in identity, but the value are indeed changed.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b</span><br><span class="line">([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = (<span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(t, u)</span><br><span class="line">(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t, u</span><br><span class="line">((<span class="number">10</span>, <span class="number">20</span>), (<span class="number">30</span>, <span class="number">40</span>))</span><br><span class="line"><span class="comment"># tuple are immutable objects, so the behavior should be the same as int object discussed above.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Avoid setting the default parameter as mutable object (<code>list</code>, <code>dict</code>, …). Check the example to understand the side effect from it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HauntedBus</span>:</span></span><br><span class="line">    <span class="string">"""A bus model haunted by ghost passengers"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, passengers=[])</span>:</span></span><br><span class="line">        self.passengers = passengers</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.passengers.append(name)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.passengers.remove(name)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus1 = HauntedBus([<span class="string">'Alice'</span>, <span class="string">'Bill'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus1.passengers</span><br><span class="line">[<span class="string">'Alice'</span>, <span class="string">'Bill'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus1.pick(<span class="string">'Charlie'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus1.drop(<span class="string">'Alice'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus1.passengers</span><br><span class="line">[<span class="string">'Bill'</span>, <span class="string">'Charlie'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus2 = HauntedBus()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus2.pick(<span class="string">'Carrie'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus2.passengers</span><br><span class="line">[<span class="string">'Carrie'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus3 = HauntedBus()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus3.passengers</span><br><span class="line">[<span class="string">'Carrie'</span>]</span><br><span class="line"><span class="comment"># the bus3 acutally shares the passengers list with bus2!!</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus3.pick(<span class="string">'Dave'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus2.passengers</span><br><span class="line">[<span class="string">'Carrie'</span>, <span class="string">'Dave'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus2.passengers <span class="keyword">is</span> bus3.passengers</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus1.passengers</span><br><span class="line">[<span class="string">'Bill'</span>, <span class="string">'Charlie'</span>]</span><br></pre></td></tr></table></figure>
<p>The problem is that each default value is evaluated <strong>when the function is defined — i.e. usually when the module is loaded</strong> — and the default values <strong>become attributes of the function object</strong>. So if a default value is a mutable object, and you change it, the change will affect every future call of the function.</p>
</li>
</ol>
<p>The defensive way to handle the above problem:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, passengers=None)</span>:</span></span><br><span class="line">    <span class="comment"># make default parameter of passengers to be immutable</span></span><br><span class="line">    <span class="keyword">if</span> passengers <span class="keyword">is</span> <span class="literal">None</span>: </span><br><span class="line">        self.passengers = []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.passengers = list(passengers)</span><br><span class="line">        <span class="comment"># here do not directly assign passengers passed in to be the field. Becuase in this way `self.passengers` is only the reference to the outside list. We need to create a copy of that list</span></span><br></pre></td></tr></table></figure>

<ol start="7">
<li><p>The <code>del</code> statement deletes names, not objects. An object may be garbage collected as result of a <code>del</code> command, but only if the variable deleted holds the last reference to the<br>object, or if the object becomes unreachable. In CPython the primary algorithm for garbage collection is reference counting. But for other implementations of Python they have more sophisticated garbage collector that do not rely on reference counting. We could use <code>weakref.finalize</code> to register a callback function to be called when an object is destroyed.</p>
</li>
<li><p><strong>Weak references</strong> refers to those references that will not increase the reference count, a low level mechanism underlying the more useful collections <code>WeakValueDictionary</code>, <code>WeakKeyDictionary</code>, <code>WeakSet</code>, and the <code>finalize</code> function from the <code>weakref</code> module are related to some use case of weak references. </p>
</li>
<li><p>Some strings or integers are <strong>interned</strong>, where creating two variables with the same string or integers separately will make two variables references to the same object. However it is mostly dependent on different implementation of Python. But be careful to those common stings and integers: (1)Integers in range(-5, 257), (2) Often-used, single-character, and empty strings.<br>(Source: Slide 22 from <a href="https://conferences.oreilly.com/oscon/oscon2013/public/schedule/detail/29374" target="_blank" rel="noopener">Wesley Chun’s talk</a>). The <strong>intering</strong> is quite common, for example the <a href="https://en.wikipedia.org/wiki/String_interning" target="_blank" rel="noopener">string interning</a>.</p>
</li>
</ol>
<h3 id="Pythonic-object"><a href="#Pythonic-object" class="headerlink" title="Pythonic object"></a>Pythonic object</h3><ol>
<li>Difference between object representation: <code>repr()</code> and <code>str()</code>: </li>
</ol>
<ul>
<li><code>repr()</code>:<br>Return a string representing the object as the developer wants to see it.</li>
<li><code>str()</code>:<br>Return a string representing the object as the user wants to see it.</li>
</ul>
<ol start="2">
<li><p>Difference between <code>@classmethod</code> and <code>@staticmethod</code>, the former take the class (<strong>not the instance</strong>) as the first argument, so it could change the behavior based on which class is passed in; while the latter don’t have any class object as the input and it is mainly used when we want to do something only related to the specific class, regardless of what instance in the class. A good <a href="https://julien.danjou.info/guide-python-static-class-abstract-methods/" target="_blank" rel="noopener">reference artical</a> discussed the difference in detail.</p>
</li>
<li><p>How <code>format()</code> works: check here about the <a href="https://docs.python.org/3/library/string.html#formatspec" target="_blank" rel="noopener">format mini-language</a>. Then we could add custom formatting for a class by implementing <code>__format__</code> functions. </p>
</li>
</ol>
<ol start="4">
<li><p><em>Name mangling</em>: if we name a field inside a class starting with double underscore and no or one underscore the the end, Python stores the name in the instance <code>__dict__</code> prefixed with a leading underscore and the class name. Note that it is about safety, not security: it’s designed to prevent accidental access<br>and not intentional wrongdoing.</p>
</li>
<li><p>The single underscore prefix has no special meaning to the Python interpreter when used in attribute names, but it’s a very strong convention among Python programmers that you should not access such attributes from outside the class. In modules, a single <code>_</code> in front of a top-level name does have an effect: if you write from <code>mymod import *</code> the names with a <code>_</code> prefix are not imported from mymod. But you can still write from mymod <code>import _privatefunc</code>. According to <a href="https://docs.python.org/3/tutorial/modules.html#more-on-modules" target="_blank" rel="noopener">this</a>.</p>
</li>
<li><p>To define <code>__slots__</code> you create a class attribute with that name and assign it an iterable of str with identifiers for the instance attributes. The author prefers using a tuple for that, because it conveys the message that the <code>__slots__</code> definition cannot change. That will help to reduce the overhead of per-instance <code>__dict__</code>. However, here are few drawbacks:</p>
</li>
</ol>
<ul>
<li>You must remember to redeclare <code>__slots__</code> in each subclass, since the inherited attribute is ignored by the interpreter.</li>
<li>Instances will only be able to have the attributes listed in <code>__slots__</code>, unless you include ‘<code>__dict__</code>‘ in <code>__slots__</code> — but doing so may negate the memory savings.</li>
<li>Instances cannot be targets of weak references unless you remember to include ‘<code>__weakref__</code>‘ in <code>__slots__</code>.</li>
</ul>
<h3 id="Sequence-hacking-hashing-and-slicing"><a href="#Sequence-hacking-hashing-and-slicing" class="headerlink" title="Sequence hacking, hashing and slicing"></a>Sequence hacking, hashing and slicing</h3><ol>
<li><p><code>repr()</code> is conventionaly used by debugging print, so it will abbreviate if the array output has larger (&gt;6) elements. We should use <code>reprlib</code> to limit the printing length for customized class.</p>
</li>
<li><p>How slice works? The slice index become slice object:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MySeq</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> index <span class="comment">#</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = MySeq()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">1</span>] <span class="comment">#</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">1</span>:<span class="number">4</span>] <span class="comment">#</span></span><br><span class="line">slice(<span class="number">1</span>, <span class="number">4</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>] <span class="comment">#</span></span><br><span class="line">slice(<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>, <span class="number">9</span>] <span class="comment">#</span></span><br><span class="line">(slice(<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>), <span class="number">9</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>, <span class="number">7</span>:<span class="number">9</span>] <span class="comment">#</span></span><br><span class="line">(slice(<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>), slice(<span class="number">7</span>, <span class="number">9</span>, <span class="literal">None</span>))</span><br></pre></td></tr></table></figure>
<p>To handle better slicing, in the customized class <code>__getitem__</code> function, we should separate the logic for <code>type(index) == slice</code> and <code>numbers.Integral</code>.</p>
</li>
<li><p><code>__getattr__</code> is used to get a specifc attribute in a class. Dynamic attributes could be created using specific logic in this function. Remember to raise <code>AttributeError</code> accordingly. <code>__setattr__</code> is the corresponding setter, could used to set <strong>read only</strong> attributes, which is pretty useful in hashable object.</p>
</li>
<li><p>When using reduce it’s good practice to provide the third argument,<br><code>reduce(function, iterable, initializer)</code>, to prevent this<br>exception: <code>TypeError: reduce() of empty sequence with no
initial value</code>. </p>
</li>
</ol>
<h3 id="Interfaces-from-protocols-to-ABCs"><a href="#Interfaces-from-protocols-to-ABCs" class="headerlink" title="Interfaces: from protocols to ABCs"></a>Interfaces: from protocols to ABCs</h3><ol>
<li><p>Warning of over engineering: ABCs, like descriptors and metaclasses, are tools for building frameworks.<br>Therefore, only a very small minority of Python developers<br>can create ABCs without imposing unreasonable limitations and<br>needless work on fellow programmers.</p>
</li>
<li><p>Every class has an interface: the set public attributes (methods or data attributes) implemented or inheritedby the class. For example,<br><code>__getitem__</code> or <code>__add__</code>.</p>
</li>
<li><p><em>Monkey patching</em> is to change a class or module at runtime without touchign the source code. </p>
</li>
<li></li>
</ol>
<h2 id="Other-information"><a href="#Other-information" class="headerlink" title="Other information"></a>Other information</h2><ol>
<li><p>Python in the book: <code>CPython 3.4</code></p>
</li>
<li><p>Github: <a href="https://github.com/fluentpython" target="_blank" rel="noopener">fluentpython</a></p>
</li>
<li><p>Useful visualization of Python code running: <a href="http://www.pythontutor.com/" target="_blank" rel="noopener">pythontutor</a></p>
</li>
<li><p>use <code>dir</code> function to check the keyword of an object.</p>
</li>
<li><p>use <code>dis</code> function to get the bytecode of a python function, which could be helpful if some subtle difference comparision.</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>[Missing Semester in CS] Shell scripting and tools</title>
    <url>/2020/04/05/MSC-shell-scripting/</url>
    <content><![CDATA[<p>After going through the basic bash commands in the previous class, we will explore more in putting all sort of commands together into a bash script file.</p>
<h2 id="Brief"><a href="#Brief" class="headerlink" title="Brief"></a>Brief</h2><p>There are a bunch of must-knows for writing the scripts introduced in the class. Here is the complete list to check if you all understand:</p>
<ul>
<li>variables assignment (NO SPACES!)</li>
<li>difference between strings enclosed with <code>&#39;</code> and <code>&quot;</code></li>
<li>control flows: <code>if</code>, <code>while</code>, <code>case</code>, <code>for</code></li>
<li>function definition, inputs, return value and some <a href="https://www.tldp.org/LDP/abs/html/special-chars.html" target="_blank" rel="noopener">special variables</a>.</li>
<li><code>&amp;&amp;</code> and <code>||</code> operators</li>
<li>get the outputs from a command</li>
<li><a href="http://man7.org/linux/man-pages/man1/test.1.html" target="_blank" rel="noopener">testing condition</a>, also mentioned in my last post.</li>
<li>wildcards(<code>foo*</code>) and curly brace(<code>foo.{jpg,png}</code>, <code>foo{a..h}</code>, <code>foo{1..100}</code>) for variables.</li>
<li><a href="https://github.com/koalaman/shellcheck" target="_blank" rel="noopener">shellcheck</a></li>
</ul>
<a id="more"></a>

<p>I would add the <a href="https://kvz.io/bash-best-practices.html" target="_blank" rel="noopener">artical</a> for some helpful bash settings. However I guess finding your own convention of writing / debugging bash script would be even helpful by adopting those conventions that fit for you.</p>
<p>Besides the techniques, several practical use cases are discussed, which might make our experience in writing bash less painful.</p>
<ul>
<li>find how to use command</li>
<li>find files</li>
<li>find / match codes</li>
<li>find previous used shell commands</li>
<li>faster directory navigation</li>
</ul>
<h2 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h2><ol>
<li><p>Read <a href="http://man7.org/linux/man-pages/man1/ls.1.html" target="_blank" rel="noopener"><code>man ls</code></a> and write an <code>ls</code> command that lists files in the following manner</p>
<ul>
<li><p>Includes all files, including hidden files</p>
</li>
<li><p>Sizes are listed in human readable format (e.g. 454M instead of 454279954)</p>
</li>
<li><p>Files are ordered by recency</p>
</li>
<li><p>Output is colorized</p>
<p>A sample output would look like this</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">-rw-r--r--   1<span class="built_in"> user group </span>1.1M Jan 14 09:53 baz</span><br><span class="line">drwxr-xr-x   5<span class="built_in"> user group </span> 160 Jan 14 09:53 .</span><br><span class="line">-rw-r--r--   1<span class="built_in"> user group </span> 514 Jan 14 06:42 bar</span><br><span class="line">-rw-r--r--   1<span class="built_in"> user group </span>106M Jan 13 12:12 foo</span><br><span class="line">drwx------+ 47<span class="built_in"> user group </span>1.5K Jan 12 18:08 <span class="built_in">..</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -lath --color=auto</span></span><br></pre></td></tr></table></figure>
<p>This is an example which requires us to understand more options from <code>ls</code>. In short, <code>-l</code> give LONG format, <code>-a</code> specifies to show ALL. <code>-t</code> means showing in TIME (recency) order. <code>-h</code> equals to <code>--human-readable</code>. <code>--color=auto</code> colorizes the output.<br> Usually the default in Ubuntu System, <code>ls</code> already refers to <code>ls --color=auto</code> for better visualization using <a href="http://linuxcommand.org/lc3_man_pages/aliash.html" target="_blank" rel="noopener">aliasing</a>.</p>
<ol start="2">
<li>Write bash functions  <code>marco</code> and <code>polo</code> that do the following.<br>Whenever you execute <code>marco</code> the current working directory should be saved in some manner, then when you execute <code>polo</code>, no matter what directory you are in, <code>polo</code> should <code>cd</code> you back to the directory where you executed <code>marco</code>.<br>For ease of debugging you can write the code in a file <code>marco.sh</code> and (re)load the definitions to your shell by executing <code>source marco.sh</code>.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash variable setting and usage</span></span><br><span class="line"><span class="function"><span class="title">marco</span></span>() &#123;</span><br><span class="line">    <span class="built_in">export</span> MARCO=$(<span class="built_in">pwd</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">polo</span></span>() &#123;</span><br><span class="line">    <span class="built_in">cd</span> <span class="string">"<span class="variable">$MARCO</span>"</span> <span class="comment"># or cd $&#123;MARCO&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>Say you have a command that fails rarely. In order to debug it you need to capture its output but it can be time consuming to get a failure run.<br>Write a bash script that runs the following script until it fails and captures its standard output and error streams to files and prints everything at the end.<br>Bonus points if you can also report how many runs it took for the script to fail.</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">n=$(( RANDOM % 100 ))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ n -eq 42 ]]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Something went wrong"</span></span><br><span class="line">   &gt;&amp;2 <span class="built_in">echo</span> <span class="string">"The error was using magic numbers"</span></span><br><span class="line">   <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Everything went according to plan"</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">count=0</span><br><span class="line">until [[ <span class="string">"$?"</span> -ne 0 ]];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  count=$((count+1))</span><br><span class="line">  ./random.sh &amp;&gt; out.txt</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"found error after <span class="variable">$count</span> runs"</span></span><br><span class="line">cat out.txt</span><br></pre></td></tr></table></figure>

<p>Some points interesting to check:</p>
<p><code>n=$(( RANDOM % 100 ))</code><br>Check <a href="http://mywiki.wooledge.org/ArithmeticExpression" target="_blank" rel="noopener">math context</a> about how to do arithmetic calculations in bash script.</p>
<p><code>if [[ n -eq 42 ]]</code><br>Check <a href="http://mywiki.wooledge.org/BashFAQ/031" target="_blank" rel="noopener">Test</a> for different test conditions syntax in bash.</p>
<p><code>&quot;$?&quot;</code> Refers the exit code from last command.<br>Check <a href="https://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html" target="_blank" rel="noopener">Special Variables</a> in bash.</p>
<ol start="4">
<li><p>As we covered in lecture <code>find</code>‘s <code>-exec</code> can be very powerful for performing operations over the files we are searching for.<br>However, what if we want to do something with <strong>all</strong> the files, like creating a zip file?<br>As you have seen so far commands will take input from both arguments and STDIN.<br>When piping commands, we are connecting STDOUT to STDIN, but some commands like <code>tar</code> take inputs from arguments.<br>To bridge this disconnect there’s the <a href="http://man7.org/linux/man-pages/man1/xargs.1.html" target="_blank" rel="noopener"><code>xargs</code></a> command which will execute a command using STDIN as arguments.<br>For example <code>ls | xargs rm</code> will delete the files in the current directory.</p>
<p> Your task is to write a command that recursively finds all HTML files in the folder and makes a zip with them. Note that your command should work even if the files have spaces (hint: check <code>-d</code> flag for <code>xargs</code>)</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> find . -<span class="built_in">type</span> f -name <span class="string">"*.html"</span> | xargs -d <span class="string">'\n'</span>  tar -cvzf</span></span><br><span class="line">  archive.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>(Advanced) Write a command or script to recursively find the most recently modified file in a directory. More generally, can you list all files by recency?</p>
</li>
</ol>
<p>Here is one of the answer from <a href="https://stackoverflow.com/questions/5566310/how-to-recursively-find-and-list-the-latest-modified-files-in-a-directory-with-s" target="_blank" rel="noopener">here</a>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">find <span class="variable">$1</span> -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">stat</span> --format <span class="string">'%Y :%y %n'</span> <span class="string">"&#123;&#125;"</span> \; | sort -nr | cut -d: -f2- | head -n1</span><br></pre></td></tr></table></figure>
<p>Notes:</p>
<p><code>sort -nr</code> only sorted by lexical order, but because now the lexical order matches the time order, we can use in this way.</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>shell</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>[Missing Semester in CS] Shell</title>
    <url>/2020/04/01/MSC-shell/</url>
    <content><![CDATA[<p>The first class introduces the terminal shell, and they mainly focus on Bash since it is the default in most platform.</p>
<h2 id="Brief"><a href="#Brief" class="headerlink" title="Brief"></a>Brief</h2><p>It is perfect for the beginners without any knowledge of shell. Starting from terminal basics to some basic commands in bash such as <code>echo</code> and <code>ls</code>, the class provides enough information for anyone to start to explore the shell system (I guess <code>man</code> is enough to start …).</p>
<p>After going through the video and texts, we still need to figure out how to use more commands in order to grasp the basics of temrinal. I guess the most important experience for me is to search <strong>only when you need it</strong>. There are tons of commands to know if we want them all, and each commands has tons of options to explore. It turns to be extremely boring for me if I learn by reading A-Z exhausitive reference of shell commands. If you want to know how to find a file, then you learn <code>find</code>, and if you need to change a batch of files’ names, you get to know <code>for loop</code> and probably <code>sed</code>.</p>
<p>Another thing that might be helpful is, there are always many ways to finish one target. If you don’t like the top answer from <a href="https://stackoverflow.com/" target="_blank" rel="noopener">StackOverflow</a>, maybe the second one or some comments might attract you.</p>
<a id="more"></a>

<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><ol>
<li>Create a new directory called <code>missing</code> under <code>/tmp</code>.</li>
</ol>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /tmp</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir missing</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Look up the <code>touch</code> program. The <code>man</code> program is your friend.</li>
</ol>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> man touch</span></span><br></pre></td></tr></table></figure>
<p>Here is a <a href="https://unix.stackexchange.com/questions/109003/what-are-the-legitimate-uses-of-the-touch-command" target="_blank" rel="noopener">link</a> about discussion<br>of how to use touch. Except create a new file, it can change the<br>timestep to accomplish interesting task.</p>
<ol start="3">
<li>Use <code>touch</code> to create a new file called <code>semester</code> in <code>missing</code>.</li>
</ol>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> touch semester</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Write the following into that file, one line at a time:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">curl --head --silent https://missing.csail.mit.edu</span><br></pre></td></tr></table></figure>
The first line might be tricky to get working. It’s helpful to know that<br><code>#</code> starts a comment in Bash, and <code>!</code> has a special meaning even within<br>double-quoted (<code>&quot;</code>) strings. Bash treats single-quoted strings (<code>&#39;</code>)<br>differently: they will do the trick in this case. See the Bash<br><a href="https://www.gnu.org/software/bash/manual/html_node/Quoting.html" target="_blank" rel="noopener">quoting</a><br>manual page for more information.</li>
</ol>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> \<span class="comment">#\!/bin/sh  &gt; semester</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"curl --head --silent https://missing.csail.mit.edu"</span> &gt;&gt; semester</span></span><br></pre></td></tr></table></figure>
<p>What if we want to add these line at the beginning of the file? Here are<br>some <a href="https://superuser.com/questions/246837/how-do-i-add-text-to-the-beginning-of-a-file-in-bash" target="_blank" rel="noopener">solutions</a>.</p>
<ol start="5">
<li>Try to execute the file, i.e. type the path to the script (<code>./semester</code>)<br> into your shell and press enter. Understand why it doesn’t work by<br> consulting the output of <code>ls</code> (hint: look at the permission bits of the<br> file).</li>
</ol>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -l semester</span></span><br><span class="line">-rw-r--r-- 1 hcwang hcwang 51 Apr  1 23:35 semester</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Run the command by explicitly starting the <code>sh</code> interpreter, and giving it<br> the file <code>semester</code> as the first argument, i.e. <code>sh semester</code>. Why does<br> this work, while <code>./semester</code> didn’t?</li>
</ol>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh semester</span></span><br><span class="line">HTTP/2 200</span><br><span class="line">server: GitHub.com</span><br><span class="line">content-type: text/html; charset=utf-8</span><br><span class="line">......</span><br><span class="line">content-length: 6845</span><br></pre></td></tr></table></figure>
<p>Why is that? When use <code>sh</code>, the system will call <code>dash</code> interpreter to <strong>read</strong> the file <code>semester</code>, where the reading is permitted. While <code>./semester</code> directly <strong>execute</strong> the file which does not has execution permission.</p>
<ol start="7">
<li><p>Look up the <code>chmod</code> program (e.g. use <code>man chmod</code>).</p>
</li>
<li><p>Use <code>chmod</code> to make it possible to run the command <code>./semester</code> rather than<br> having to type <code>sh semester</code>. How does your shell know that the file is<br> supposed to be interpreted using <code>sh</code>? See this page on the<br> <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)" target="_blank" rel="noopener">shebang</a> line for more<br> information.</p>
</li>
</ol>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod u+x semester</span></span><br></pre></td></tr></table></figure>

<ol start="9">
<li><p>Use <code>|</code> and <code>&gt;</code> to write the “last modified” date output by<br><code>semester</code> into a file called <code>last-modified.txt</code> in your home<br>directory.</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./semester | grep <span class="string">"last modified"</span> &gt; last-modified.txt</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Write a command that reads out your laptop battery’s power level or your<br>desktop machine’s CPU temperature from <code>/sys</code>. Note: if you’re a macOS<br>user, your OS doesn’t have sysfs, so you can skip this exercise.</p>
</li>
</ol>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># for energy</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /sys/class/power_supply/BAT0/energy_now</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /sys/class/power_supply/BAT0/energy_full_design</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /sys/class/power_supply/BAT0/energy_full</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># for cpu temperature</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /sys/devices/platform/coretemp.0/hwmon/hwmon?/temp*</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>shell</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Missing Semester for CS</title>
    <url>/2020/03/30/missing-semester/</url>
    <content><![CDATA[<p>The <a href="https://missing.csail.mit.edu/" target="_blank" rel="noopener">Missing Sememster of CS degree</a> is actually the missing one for my coursework in CS degree. It is a good chance for anyone who has a CS degree to brush up his or her idea about tools behind the Computer Science. Absolutely it would be the perfect course for students who are now learning CS.  </p>
<p>Here is the course structure, they cover a bunch of useful tools that are indeed beneficial to our development journey.</p>
<h2 id="Course-Structure"><a href="#Course-Structure" class="headerlink" title="Course Structure"></a>Course Structure</h2><ul>
<li>Shell</li>
<li>Vim</li>
<li>Data manipulation</li>
<li>Commandline environment</li>
<li>Git</li>
<li>Debuging, logging, profiling</li>
<li>Makefiles</li>
<li>Security</li>
<li>Miscellaneous</li>
</ul>
<a id="more"></a>

<h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Now I am using vim to write the post. Although sometimes it took me a bit longer to edit, I feel I am doing faster and better. As the instructor in the course showed, <strong>it should take about 20 hours for us to get back the editing speed in a new editor</strong>. After 20 hours, every minute faster is the actual gain.</p>
<p>Beside the speed increasing, using “hacker” tool may help us to code in a positive way: explore and learn to reduce repetitive actions. I guess that is the biggest reason that we use computer. Computers save us already great amount of time, but there are way more to save! I can feel that there are still a lot redundant and repetitve actions during the development, and that is the motivation for more tools to come. For us, it is the first step to keep searching and practicing the useful tools, breaking the fear of steep learning curve. It is the first 20 hours that hinges us to the more productive and hacking work style.</p>
<p>Here is the <a href="https://missing.csail.mit.edu/about/" target="_blank" rel="noopener">motivation</a> from the course instructor, maybe one will get a more interesting point from there.</p>
<p>Anyway, I will try to start. As a concrete action, I will post following up posts to finish the exercises in the course, and hopefully find more useful resources to add.</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
</search>
